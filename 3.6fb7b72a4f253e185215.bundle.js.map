{"version":3,"file":"3.6fb7b72a4f253e185215.bundle.js","sources":["webpack:///./node_modules/jellyschema/jellyschema.js"],"sourcesContent":["/* tslint:disable */\nimport * as wasm from './jellyschema_bg';\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* Generates JSON and UI schema object\n*\n* ```js\n* {\n    *     \\\"jsonSchema\\\": {...},\n    *     \\\"uiSchema\\\": {...}\n    * }\n    * ```\n    *\n    * # Arguments\n    *\n    * * `schema` - Jelly Schema as an object or a string\n    *\n    * # Throws\n    *\n    * If the input schema is invalid or in case of internal error (serialization).\n    * @param {any} arg0\n    * @returns {any}\n    */\n    export function generateJsonAndUiSchema(arg0) {\n        try {\n            return takeObject(wasm.generateJsonAndUiSchema(addBorrowedObject(arg0)));\n\n        } finally {\n            heap[stack_pointer++] = undefined;\n\n        }\n\n    }\n\n    let cachedTextDecoder = new TextDecoder('utf-8');\n\n    let cachegetUint8Memory = null;\n    function getUint8Memory() {\n        if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n            cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n        }\n        return cachegetUint8Memory;\n    }\n\n    function getStringFromWasm(ptr, len) {\n        return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n    }\n\n    export function __wbg_error_cc95a3d302735ca3(arg0, arg1) {\n        let varg0 = getStringFromWasm(arg0, arg1);\n\n        varg0 = varg0.slice();\n        wasm.__wbindgen_free(arg0, arg1 * 1);\n\n        console.error(varg0);\n    }\n\n    export function __wbg_getTime_ad2f4262ea1c8451(arg0) {\n        return getObject(arg0).getTime();\n    }\n\n    function addHeapObject(obj) {\n        if (heap_next === heap.length) heap.push(heap.length + 1);\n        const idx = heap_next;\n        heap_next = heap[idx];\n\n        heap[idx] = obj;\n        return idx;\n    }\n\n    export function __wbg_new0_caf7c3acb88b5964() {\n        return addHeapObject(new Date());\n    }\n\n    export function __wbg_new_baf10398b0d0c64d(arg0, arg1) {\n        let varg0 = getStringFromWasm(arg0, arg1);\n        return addHeapObject(new Function(varg0));\n    }\n\n    export function __wbg_call_173f04c850a68d5f(arg0, arg1) {\n        return addHeapObject(getObject(arg0).call(getObject(arg1)));\n    }\n\n    export function __wbg_self_58232ab37cbe6608(arg0) {\n        return addHeapObject(getObject(arg0).self);\n    }\n\n    export function __wbg_crypto_329b714d7e7d321d(arg0) {\n        return addHeapObject(getObject(arg0).crypto);\n    }\n\n    export function __wbg_getRandomValues_2f960218fce3a102(arg0) {\n        return addHeapObject(getObject(arg0).getRandomValues);\n    }\n\n    function getArrayU8FromWasm(ptr, len) {\n        return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n    }\n\n    export function __wbg_getRandomValues_5581e85fc6616df6(arg0, arg1, arg2) {\n        let varg1 = getArrayU8FromWasm(arg1, arg2);\n        getObject(arg0).getRandomValues(varg1);\n    }\n\n    export function __wbg_require_4a70cbfd3adc73a8(arg0, arg1) {\n        let varg0 = getStringFromWasm(arg0, arg1);\n        return addHeapObject(require(varg0));\n    }\n\n    export function __wbg_randomFillSync_355c3fcfa754fa4e(arg0, arg1, arg2) {\n        let varg1 = getArrayU8FromWasm(arg1, arg2);\n        getObject(arg0).randomFillSync(varg1);\n    }\n\nexport function __wbindgen_object_drop_ref(i) { dropObject(i); }\n\nexport function __wbindgen_string_new(p, l) {\n    return addHeapObject(getStringFromWasm(p, l));\n}\n\nexport function __wbindgen_is_undefined(idx) {\n    return getObject(idx) === undefined ? 1 : 0;\n}\n\nexport function __wbindgen_is_string(i) {\n    return typeof(getObject(i)) === 'string' ? 1 : 0;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passStringToWasm(arg) {\n\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = wasm.__wbindgen_malloc(buf.length);\n    getUint8Memory().set(buf, ptr);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nexport function __wbindgen_string_get(i, len_ptr) {\n    let obj = getObject(i);\n    if (typeof(obj) !== 'string') return 0;\n    const ptr = passStringToWasm(obj);\n    getUint32Memory()[len_ptr / 4] = WASM_VECTOR_LEN;\n    return ptr;\n}\n\nexport function __wbindgen_json_parse(ptr, len) {\n    return addHeapObject(JSON.parse(getStringFromWasm(ptr, len)));\n}\n\nexport function __wbindgen_json_serialize(idx, ptrptr) {\n    const ptr = passStringToWasm(JSON.stringify(getObject(idx)));\n    getUint32Memory()[ptrptr / 4] = ptr;\n    return WASM_VECTOR_LEN;\n}\n\nexport function __wbindgen_jsval_eq(a, b) {\n    return getObject(a) === getObject(b) ? 1 : 0;\n}\n\nexport function __wbindgen_rethrow(idx) { throw takeObject(idx); }\n\nfunction freeJellySchema(ptr) {\n\n    wasm.__wbg_jellyschema_free(ptr);\n}\n/**\n*/\nexport class JellySchema {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeJellySchema(ptr);\n    }\n\n    /**\n    * Instantiates new JellySchema object\n    *\n    * # Arguments\n    *\n    * * `schema` - JellySchema as a string or an object\n    *\n    * # Throws\n    *\n    * Constructor throws in case of invalid `schema` argument value.\n    * @param {any} arg0\n    * @returns {}\n    */\n    constructor(arg0) {\n        try {\n            this.ptr = wasm.jellyschema_constructor(addBorrowedObject(arg0));\n\n        } finally {\n            heap[stack_pointer++] = undefined;\n\n        }\n\n    }\n    /**\n    * Validates data against JellySchema\n    *\n    * # Arguments\n    *\n    * * `data` - A JSON object\n    * @param {any} arg0\n    * @returns {boolean}\n    */\n    validate(arg0) {\n        try {\n            return (wasm.jellyschema_validate(this.ptr, addBorrowedObject(arg0))) !== 0;\n\n        } finally {\n            heap[stack_pointer++] = undefined;\n\n        }\n\n    }\n    /**\n    * Generates JSON Schema & UI Schema object\n    *\n    * ```js\n    * {\n        *     \\\"jsonSchema\\\": {...},\n        *     \\\"uiSchema\\\": {...}\n        * }\n        * ```\n        *\n        * # Throws\n        *\n        * In case of internal error only (serialization).\n        * @returns {any}\n        */\n        jsonAndUiSchema() {\n            return takeObject(wasm.jellyschema_jsonAndUiSchema(this.ptr));\n        }\n        /**\n        * Returns last validation errors\n        *\n        * # Throws\n        *\n        * In case of internal error only (serialization).\n        * @returns {any}\n        */\n        errors() {\n            return takeObject(wasm.jellyschema_errors(this.ptr));\n        }\n    }\n\n    export function __wbindgen_throw(ptr, len) {\n        throw new Error(getStringFromWasm(ptr, len));\n    }\n\n"],"mappings":"AAAA","sourceRoot":""}