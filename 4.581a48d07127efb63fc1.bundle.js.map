{"version":3,"file":"4.581a48d07127efb63fc1.bundle.js","sources":["webpack:///./src/unstable/components/JellyForm/index.tsx"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jellyschema = require(\"jellyschema\");\nvar cloneDeep = require(\"lodash/cloneDeep\");\nvar isEqual = require(\"lodash/isEqual\");\nvar merge = require(\"lodash/merge\");\nvar omit = require(\"lodash/omit\");\nvar React = require(\"react\");\nvar Form_1 = require(\"../Form\");\nvar formulas_1 = require(\"./formulas\");\nvar computeFormSchemas = function (jellySchema, uiSchema) {\n    var computed = jellyschema.generateJsonAndUiSchema(jellySchema);\n    return {\n        schema: computed.jsonSchema,\n        uiSchema: merge({}, computed.uiSchema, uiSchema),\n    };\n};\nvar JellyForm = (function (_super) {\n    __extends(JellyForm, _super);\n    function JellyForm(props) {\n        var _this = _super.call(this, props) || this;\n        _this.onChange = function (changeData) {\n            var formData = changeData.formData;\n            var schema = _this.state.schema;\n            var data = cloneDeep(formData);\n            var evaluate = formulas_1.runFormulas(schema, data);\n            var startingState = formulas_1.defaultValueForSchema(schema);\n            var result = merge(startingState, formData, evaluate);\n            _this.setState({ value: result });\n            if (_this.props.onFormChange) {\n                _this.props.onFormChange(__assign({}, changeData, { formData: result }));\n            }\n        };\n        var _a = computeFormSchemas(props.schema, props.uiSchema), schema = _a.schema, uiSchema = _a.uiSchema;\n        _this.state = {\n            value: props.value || formulas_1.defaultValueForSchema(schema),\n            schema: schema,\n            uiSchema: uiSchema,\n        };\n        return _this;\n    }\n    JellyForm.prototype.componentWillReceiveProps = function (nextProps) {\n        if (!isEqual(this.props.value, nextProps.value)) {\n            this.setState({\n                value: formulas_1.runFormulas(this.state.schema, nextProps.value),\n            });\n        }\n        if (!isEqual(this.props.schema, nextProps.schema) ||\n            !isEqual(this.props.uiSchema, nextProps.uiSchema)) {\n            var _a = computeFormSchemas(nextProps.schema, nextProps.uiSchema), schema = _a.schema, uiSchema = _a.uiSchema;\n            this.setState({\n                schema: schema,\n                uiSchema: uiSchema,\n            });\n        }\n    };\n    JellyForm.prototype.render = function () {\n        var _a = this.state, value = _a.value, schema = _a.schema, uiSchema = _a.uiSchema;\n        var options = omit(this.props, [\n            'value',\n            'schema',\n            'uiSchema',\n            'onFormChange',\n        ]);\n        return (React.createElement(Form_1.default, __assign({ value: value, schema: schema, uiSchema: uiSchema, onFormChange: this.onChange }, options)));\n    };\n    return JellyForm;\n}(React.Component));\nexports.default = JellyForm;\n"],"mappings":"AACA","sourceRoot":""}